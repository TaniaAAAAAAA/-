//---------------------------------------------------------------------------

#include <vcl.h>
#include <math.h>
#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
struct Elem	// Оголошення елемента стека
{ int x; Elem *next;
};
Elem *root=0;	// Оголошення вершини стека і початкове обнулення
void add (int d)// Долучення елемента зі значенням d до стека
{ // Оголошення й розміщення у пам'яті допоміжного елемента
Elem *c=new Elem; c->x=d;
c->next=0;	// Попередній елемент покищо не визначено.
c->next=root; // Новий елемент пов'язується зі старою вершиною стека
root=c;	// і після цього він стає новою вершиною.
}
 
void del()	// Вилучення верхнього елемента стека
{ Elem *c=root; // Запам'ятовування першого елемента у додатковій змінній c
root=root->next; // Другий елемент тепер стає першим
// (root->next - це звертання до другого елемента).
delete c;	// Звільнення пам'яті від елемента (тобто вилучення його)
}
void print()	// Виведення елементів стека до Memo
{ Form1->Memo2->Clear(); Elem *c=root;
while (c!=0)
{ Form1->Memo2->Lines->Add(IntToStr(c->x)); c=c->next;	// Перехід до наступного елемента стека
}
}
// Обчислення середнього арифметичного парних значень елементів стека
float srednee()
{ int s=0, k=0; float sr; Elem *c=root; while(c!=0)
{ if(c->x % 2==0) // Перевірка, якщо значення елемента стека є парне,
{ s+=c->x;	// долучення його до суми
k++;	// і збільшення кількості на 1.
}
c=c->next;	// Перехід до наступного елемента
}
if(k!=0) sr=(float)s/k;
return sr;	// Повернення середнього арифметичного
}
// Очищення пам'яті від стека
// (використовується функція вилучення вершини стека)
void clean()
{ while(root!=0)	// Допоки стек є непорожній (вершина не 0),
del();	// вилучення вершини.
}

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button7Click(TObject *Sender)
{
add(StrToInt(Edit1->Text));
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button1Click(TObject *Sender)
{
int n=Memo1->Lines->Count; for(int i=0; i<n; i++)
add(StrToInt(Memo1->Lines->Strings[i]));
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button2Click(TObject *Sender)
{
del();
print();
        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button3Click(TObject *Sender)
{
print();        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button4Click(TObject *Sender)
{
if(root==0){ ShowMessage("Стек є порожній"); return; } Edit2->Text=FloatToStr(srednee());
while(root != 0 && root->x <= 0) del();
        
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button5Click(TObject *Sender)
{
while(root!=0) del();
Memo1->Clear();
Memo2->Clear();
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button6Click(TObject *Sender)
{
Close();
}
//---------------------------------------------------------------------------
